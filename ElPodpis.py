# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ElPodpis.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QDate, QTime, QDateTime, Qt
from PyQt5.QtWidgets import *
import os, platform
from PyQt5.QtGui import *
from PyQt5.QtCore import *
import math, random, glob
import hashlib, shutil
from zipfile import ZipFile

def isprime(n):
    for i in range(2, n):
        if i*i >= n:
            break
        if n % i == 0:
            return False
    return True

def RandomPrimeNumber():
    while True:
        prime = random.randrange(pow(10, 12), pow(10, 13) - 1)
        if isprime(prime):
            return prime

def getphi(p,q):
    phi = (p-1)*(q-1)
    return phi

def ValueN(p,q, phi):
    b = 0
    n = p*q
    while b != 1:
        e = random.randrange(1, phi)
        b = math.gcd(phi, e)

    return n, e

def PowerModInvers(phi, e):
    d = pow(e, -1, phi)
    return d

def PowerMod(block, e, n):
    text = pow(block, e, n)
    return text

def Split5Encrypt(text):
    splitText = [text[i:i+5] for i in range(0, len(text), 5)]
    return splitText

def ConvertToOrd(text):
    asciinumber = []
    for i in text:
        asciinumber.append(ord(i))
    return asciinumber

def ConvertToBinary(text):
    binValue = 0
    binResult = []
    for i in range(len(text)):
        binValue = bin(text[i])[2:]
        binValue = binValue.zfill(12)
        binResult.append(binValue)
    return binResult

def Connect(text):
    ConnectedText = ''.join(text)
    return ConnectedText

def ConvertToDec(text):
    decimal = []
    for i in range(len(text)):
        decimal.append(int(text[i],2))

    return decimal

def ConBackToDecryption(text):
    Bin = bin(text)[2:]
    Bin = Bin.zfill(60)

    return Bin

def split12Decrypt(text):
    splitText = [text[i:i+12] for i in range(0, len(text), 12)]
    return splitText

def convertToChar(text):
    asciichar = []
    for i in text:
        if i != 0:
            asciichar.append(chr(i))
    return asciichar

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("Elektronicky Podpis")
        MainWindow.setFixedSize(779, 454)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 771, 441))
        self.tabWidget.setStyleSheet("")
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.otevritSoubor = QtWidgets.QPushButton(self.tab)
        self.otevritSoubor.setGeometry(QtCore.QRect(10, 30, 261, 51))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.otevritSoubor.setFont(font)
        self.otevritSoubor.setStyleSheet("border-radius: 12;\n"
"background-color: lightgray")
        self.otevritSoubor.setObjectName("otevritSoubor")
        self.Popis01 = QtWidgets.QLabel(self.tab)
        self.Popis01.setGeometry(QtCore.QRect(280, 10, 121, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Popis01.setFont(font)
        self.Popis01.setObjectName("Popis01")
        self.scrollArea = QtWidgets.QScrollArea(self.tab)
        self.scrollArea.setGeometry(QtCore.QRect(280, 30, 481, 51))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 479, 49))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout.setObjectName("verticalLayout")
        self.Cesta = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Cesta.sizePolicy().hasHeightForWidth())
        self.Cesta.setSizePolicy(sizePolicy)
        self.Cesta.setText("")
        self.Cesta.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.Cesta.setObjectName("Cesta")
        self.verticalLayout.addWidget(self.Cesta)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.Popis02 = QtWidgets.QLabel(self.tab)
        self.Popis02.setGeometry(QtCore.QRect(20, 90, 141, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Popis02.setFont(font)
        self.Popis02.setObjectName("Popis02")
        self.scrollArea_2 = QtWidgets.QScrollArea(self.tab)
        self.scrollArea_2.setGeometry(QtCore.QRect(10, 110, 751, 231))
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 749, 229))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_2)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.Informace = QtWidgets.QLabel(self.scrollAreaWidgetContents_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Informace.sizePolicy().hasHeightForWidth())
        self.Informace.setSizePolicy(sizePolicy)
        self.Informace.setText("")
        self.Informace.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.Informace.setObjectName("Informace")
        self.verticalLayout_2.addWidget(self.Informace)
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_2)
        self.PodpisUloz = QtWidgets.QPushButton(self.tab)
        self.PodpisUloz.setGeometry(QtCore.QRect(10, 350, 161, 51))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.PodpisUloz.setFont(font)
        self.PodpisUloz.setStyleSheet("border-radius: 12;\n"
"background-color: lightgray")
        self.PodpisUloz.setObjectName("PodpisUloz")
        self.Hotovo = QtWidgets.QLabel(self.tab)
        self.Hotovo.setGeometry(QtCore.QRect(190, 370, 449, 30))
        self.Hotovo.setText("")
        self.Hotovo.setObjectName("Hotovo")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.SouborKontrola = QtWidgets.QPushButton(self.tab_2)
        self.SouborKontrola.setGeometry(QtCore.QRect(10, 30, 211, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.SouborKontrola.setFont(font)
        self.SouborKontrola.setStyleSheet("border-radius: 12;\n"
"background-color: lightgray")
        self.SouborKontrola.setObjectName("SouborKontrola")
        self.vysledek = QtWidgets.QLabel(self.tab_2)
        self.vysledek.setGeometry(QtCore.QRect(20, 190, 711, 181))
        self.vysledek.setText("")
        self.vysledek.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.vysledek.setObjectName("vysledek")
        self.VerejnyKlic = QtWidgets.QPushButton(self.tab_2)
        self.VerejnyKlic.setGeometry(QtCore.QRect(10, 100, 211, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.VerejnyKlic.setFont(font)
        self.VerejnyKlic.setStyleSheet("border-radius: 12;\n"
"background-color: lightgray")
        self.VerejnyKlic.setObjectName("VerejnyKlic")
        self.Popis01_2 = QtWidgets.QLabel(self.tab_2)
        self.Popis01_2.setGeometry(QtCore.QRect(230, 10, 111, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Popis01_2.setFont(font)
        self.Popis01_2.setObjectName("Popis01_2")
        self.Popis02_2 = QtWidgets.QLabel(self.tab_2)
        self.Popis02_2.setGeometry(QtCore.QRect(230, 80, 111, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Popis02_2.setFont(font)
        self.Popis02_2.setObjectName("Popis02_2")
        self.scrollArea_3 = QtWidgets.QScrollArea(self.tab_2)
        self.scrollArea_3.setGeometry(QtCore.QRect(230, 30, 501, 41))
        self.scrollArea_3.setWidgetResizable(True)
        self.scrollArea_3.setObjectName("scrollArea_3")
        self.scrollAreaWidgetContents_3 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_3.setGeometry(QtCore.QRect(0, 0, 499, 39))
        self.scrollAreaWidgetContents_3.setObjectName("scrollAreaWidgetContents_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_3)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Cestakontrola = QtWidgets.QLabel(self.scrollAreaWidgetContents_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Cestakontrola.sizePolicy().hasHeightForWidth())
        self.Cestakontrola.setSizePolicy(sizePolicy)
        self.Cestakontrola.setText("")
        self.Cestakontrola.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.Cestakontrola.setObjectName("Cestakontrola")
        self.verticalLayout_3.addWidget(self.Cestakontrola)
        self.scrollArea_3.setWidget(self.scrollAreaWidgetContents_3)
        self.scrollArea_4 = QtWidgets.QScrollArea(self.tab_2)
        self.scrollArea_4.setGeometry(QtCore.QRect(230, 100, 501, 40))
        self.scrollArea_4.setWidgetResizable(True)
        self.scrollArea_4.setObjectName("scrollArea_4")
        self.scrollAreaWidgetContents_4 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_4.setGeometry(QtCore.QRect(0, 0, 499, 38))
        self.scrollAreaWidgetContents_4.setObjectName("scrollAreaWidgetContents_4")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_4)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.CestaKlic = QtWidgets.QLabel(self.scrollAreaWidgetContents_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.CestaKlic.sizePolicy().hasHeightForWidth())
        self.CestaKlic.setSizePolicy(sizePolicy)
        self.CestaKlic.setText("")
        self.CestaKlic.setObjectName("CestaKlic")
        self.verticalLayout_4.addWidget(self.CestaKlic)
        self.scrollArea_4.setWidget(self.scrollAreaWidgetContents_4)
        self.pushButton = QtWidgets.QPushButton(self.tab_2)
        self.pushButton.setGeometry(QtCore.QRect(520, 150, 211, 31))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("border-radius: 12;\n"
"background-color: lightgray")
        self.pushButton.setObjectName("pushButton")
        self.tabWidget.addTab(self.tab_2, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.Hotovo.setWordWrap(True)
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.otevritSoubor.clicked.connect(self.otevriSoubor)
        self.PodpisUloz.clicked.connect(self.podepis)
        self.pushButton.clicked.connect(self.over)
        self.SouborKontrola.clicked.connect(self.nactiSouborKontrola)
        self.VerejnyKlic.clicked.connect(self.nactiKlic)

    def otevriSoubor(self):
        dialog = QFileDialog()
        dialog.setFileMode(QFileDialog.AnyFile)
        dialog.setNameFilter("Textove soubory (*.txt *.doc *.docx *.rtf *.odt)")
        dialog.setFilter(QDir.Files)

        if dialog.exec_():
                self.file_name = dialog.selectedFiles()
                info = QFileInfo(self.file_name[0])
        else:
                return 0

        self.Cesta.setText(self.file_name[0])
        self.Informace.setText("Nazev souboru: " + str(info.fileName()))
        self.Informace.setText(self.Informace.text() + "\nKoncovka souboru: " + str(info.suffix()))
        self.Informace.setText(self.Informace.text() + "\nDatum vyvoreni souboru: " + info.created().toString())
        self.Informace.setText(self.Informace.text() + "\nDatum posledni zmeny: " + info.lastModified().toString())
        self.Informace.setText(self.Informace.text() + "\nVelikost souboru: " + str(info.size()) + "B")

    def podepis(self):
        self.Hotovo.setText("Generuji klice")
        name = QFileInfo(self.file_name[0])
        n, e, d = self.Key()

        #Ulozeni privatniho klice
        dialogPriv = QFileDialog()
        dialogPriv.setWindowTitle("Zvolte složku do které se uloží privátní klíč.")
        dialogPriv.setFileMode(QFileDialog.DirectoryOnly)
        self.Hotovo.setText("Zvolte složku do které se uloží privátní klíč.")
        if dialogPriv.exec_():
            adresarPriv = dialogPriv.selectedFiles()
        else:
            self.Hotovo.setText("Došlo k zavření okna k výběru privatního klíče, běh procesu zrušen.")
            return 0

        f = open(str(adresarPriv[0]) + "/private.priv", "w")
        f.write("RSA " + str(n) + " " + str(d))
        f.close()

        self.Hotovo.setText("Ukládám pribátní klíč...")

        #Ulozeni verejneho klice
        dialogver = QFileDialog()
        dialogver.setWindowTitle("Zvolte složku do které se uloží veřejný klíč")
        dialogver.setFileMode(QFileDialog.DirectoryOnly)
        self.Hotovo.setText("Zvolte složku do které se uloží věřejný klíč.")
        if dialogver.exec_():
            adresarVerj = dialogver.selectedFiles()

        else:
            self.Hotovo.setText("Došlo k zavření okna pro výběr složky k uložení veřejného klíče, běh procesu zrušen.")
            return 0

        f = open(str(adresarVerj[0]) + "/verejnyKlic.pub", "w")
        f.write("RSA " + str(n) + " " + str(e))
        f.close()

        self.Hotovo.setText("Ukládám veřejný klíč...")

        f = open(str(self.file_name[0]), "rb")
        text = f.read()
        f.close()

        self.Hotovo.setText("Generuji HASH...")
        hash = hashlib.sha3_512(text).hexdigest()
        zasifhas = self.zisfrujHash(hash, n, d)

        dialogSif = QFileDialog()
        dialogSif.setWindowTitle("Zvolte složku do které se uloží zašifrovaný hash.")
        dialogSif.setFileMode(QFileDialog.DirectoryOnly)
        self.Hotovo.setText("Zvolte složku do které se uloží zašifrovaný hash.")

        if dialogSif.exec_():
            sif = dialogSif.selectedFiles()

        else:
            self.Hotovo.setText("Došlo k zavření okna pro výběr složky k uložení zašifrovaného hashe, běh procesu zrušen.")
            return 0
        f = open(str(sif[0]) + "/" + str(os.path.splitext(name.fileName())[0]) + ".sign", "w").close()
        f = open(str(sif[0]) + "/" + str(os.path.splitext(name.fileName())[0]) + ".sign", "a")

        f.write("RSA_SHA256 ")
        for i in zasifhas:
            f.write(str(i) + " ")

        f.close()
        self.Hotovo.setText("Ukládám zašifrovaný hash")

        dialogzip = QFileDialog()
        dialogzip.setWindowTitle("Vyberte složku pro uložení zip souboru, který bude opsahovat dokument a zašifrovaný hash.")
        dialogzip.setFileMode(QFileDialog.DirectoryOnly)
        self.Hotovo.setText("Kopíruji dokument se zašifrovaným hashem do souboru ZIP...")

        if dialogzip.exec_():
            Zip = dialogzip.selectedFiles()
        else:
            self.Hotovo.setText("Došlo k zavření okna pro výběr složky k uložení zašifrovaného hashe, běh procesu zrušen.")
            return 0
        with ZipFile(str(Zip[0]) + "/elpodpis.zip", 'w') as zip:
            zip.write(str(self.file_name[0]), os.path.basename(self.file_name[0]))
            zip.write(str(sif[0]) + "/" + str(os.path.splitext(name.fileName())[0]) + ".sign", str(os.path.splitext(name.fileName())[0]) + ".sign")

        zip.close()
        self.Hotovo.setText("HOTOVO! VŠE PROBĚHLO V POŘÁDKU")

    def nactiSouborKontrola(self):
        dialog = QFileDialog()
        dialog.setFileMode(QFileDialog.AnyFile)
        dialog.setNameFilter("Soubory typu Zip (*.zip)")
        dialog.setFilter(QDir.Files)

        if dialog.exec_():
            self.zipFile = dialog.selectedFiles()
            self.vysledek.setText("")
        else:
            self.vysledek.setText("Došlo k zavření okna pro výběr souboru ZIP, běh procesu zrušen.")
            return 0

        self.Cestakontrola.setText(str(self.zipFile[0]))

    def nactiKlic(self):
        dialog = QFileDialog()
        dialog.setFileMode(QFileDialog.AnyFile)
        dialog.setNameFilter("Soubory typu .pub (*.pub)")
        dialog.setFilter(QDir.Files)

        if dialog.exec_():
            self.PublicKey = dialog.selectedFiles()
            self.vysledek.setText("")
        else:
            self.vysledek.setText("Došlo k zavření okna pro výběr veřejného klíče, běh procesu zrušen.")
            return 0

        self.CestaKlic.setText(str(self.PublicKey[0]))

    def over(self):
        self.vysledek.setText("")
        f = open(str(self.PublicKey[0]), "r")
        klic = f.read()
        f.close()
        dir = os.path.dirname(os.path.abspath(str(self.zipFile[0])))
        helpDir = os.mkdir(str(dir) + "/helpDir01")
        editKey = klic.replace("RSA", "")
        klicedit = editKey.split()

        if klic.startswith("RSA") == False:
            self.show_PopUp_RSA()
            shutil.rmtree(str(dir) + "/helpDir01")
            return 0

        with ZipFile(str(self.zipFile[0]), 'r') as zip:
            zip.extractall(str(dir) + "/helpDir01")
        zip.close()

        filePathTXT = glob.glob(os.path.join(str(dir) + "/helpDir01", "*.txt"))
        filePathdoc = glob.glob(os.path.join(str(dir) + "/helpDir01", "*.doc"))
        filePathdocx = glob.glob(os.path.join(str(dir) + "/helpDir01", "*.docx"))
        filePathrtf = glob.glob(os.path.join(str(dir) + "/helpDir01", "*.rtf"))
        filePathodt = glob.glob(os.path.join(str(dir) + "/helpDir01", "*.odt"))
        filePathSIGN = glob.glob(os.path.join(str(dir) + "/helpDir01", "*.sign"))

        if filePathTXT:
            file = open(filePathTXT[0], "rb")
            text = file.read()
            file.close()

        elif filePathdoc:
            file = open(filePathdoc[0], "rb")
            text = file.read()
            file.close()

        elif filePathdocx:
            file = open(filePathdocx[0], "rb")
            text = file.read()
            file.close()

        elif filePathrtf:
            file = open(filePathrtf[0], "rb")
            text = file.read()
            file.close()

        elif filePathodt:
            file = open(filePathodt[0], "rb")
            text = file.read()
            file.close()

        else:
            self.show_PopUp_SouborNenalezen()
            shutil.rmtree(str(dir) + "/helpDir01")
            return 0

        if filePathSIGN:
            file = open(filePathSIGN[0], "r")
            zasifHash = file.read()
            file.close()

        else:
            self.show_PopUp_SouborNenalezen()
            shutil.rmtree(str(dir) + "/helpDir01")
            return 0

        if zasifHash.startswith("RSA_SHA256") == False:
            self.show_PopUp_RSA512()
            shutil.rmtree(str(dir) + "/helpDir01")
            return 0

        editZasihHash = zasifHash.replace("RSA_SHA256", "")

        hash = hashlib.sha3_512(text).hexdigest()
        desifHash = self.desifrujHash(editZasihHash, int(klicedit[0]), int(klicedit[1]))

        if hash == desifHash[0]:
            self.vysledek.setText("Hashe se shodují.")
        else:
            self.vysledek.setText("Hashe se neshodují je pravděpodobné, že bylo se souborem manipulováno.")

        shutil.rmtree(str(dir) + "/helpDir01")

    def Key(self):
        p = 0
        q = 0
        d = 0
        value_N = 0
        value_E = 0

        while p == q:
            p = RandomPrimeNumber()
            q = RandomPrimeNumber()

        phi = getphi(p, q)
        value_N, value_E = ValueN(p, q, phi)
        d = PowerModInvers(phi, value_E)

        return value_N, value_E, d

    def zisfrujHash(self, hash, n, d):
        zasHash = []
        splitedText = Split5Encrypt(hash)

        ordNumber = []
        binary = []
        finalUpravText = []
        encryptOT = []
        for i in range(len(splitedText)):
            ordNumber.append(ConvertToOrd(splitedText[i]))

        for i in range(len(ordNumber)):
            binary.append(ConvertToBinary(ordNumber[i]))

        for i in range(len(binary)):
            finalUpravText.append(Connect(binary[i]))

        finalUpravText = ConvertToDec(finalUpravText)

        for i in range(len(finalUpravText)):
            zasHash.append(PowerMod(finalUpravText[i], d, n))

        return zasHash

    def desifrujHash(self, zasifhash, n, e):
        split_ST = zasifhash.split()

        decryptToChar = []
        connectDec = []
        DecryptTEXT = []
        binaryST = []
        decimalST = []
        powerText = []
        splitBinaryText = []

        for i in range(len(split_ST)):
            if split_ST[i].isdigit() == True:
                powerText.append(PowerMod(int(split_ST[i]), e, n))
            else:
                self.show_PopUp_NotDigit()
                return 0

        for i in range(len(powerText)):
            binaryST.append(ConBackToDecryption(powerText[i]))

        for i in range(len(binaryST)):
            splitBinaryText.append(split12Decrypt(binaryST[i]))

        for i in range(len(splitBinaryText)):
            decimalST.append(ConvertToDec(splitBinaryText[i]))

        for i in range(len(decimalST)):
            decryptToChar.append(convertToChar(decimalST[i]))

        for i in range(len(decryptToChar)):
            connectDec.append(Connect(decryptToChar[i]))

        DecryptTEXT.append(Connect(connectDec))

        return DecryptTEXT

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.otevritSoubor.setText(_translate("MainWindow", "Otevřít soubor k podpisu"))
        self.Popis01.setText(_translate("MainWindow", "Cesta k souboru:"))
        self.Popis02.setText(_translate("MainWindow", "Informace o souboru:"))
        self.PodpisUloz.setText(_translate("MainWindow", "Podepsat a uložit"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Podepsat"))
        self.SouborKontrola.setText(_translate("MainWindow", "Načíst soubor k ověření"))
        self.VerejnyKlic.setText(_translate("MainWindow", "Načíst veřejný klíč"))
        self.Popis01_2.setText(_translate("MainWindow", "Cesta k souboru:"))
        self.Popis02_2.setText(_translate("MainWindow", "Cesta k souboru:"))
        self.pushButton.setText(_translate("MainWindow", "Zkontrolovat"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Ověřit"))

    def show_PopUp_RSA(self):
        msgbox = QMessageBox()
        msgbox.setWindowTitle("Chybny zacatek souboru")
        msgbox.setText(
            "Soubor obsahujici klic nazacina 'RSA'. Je mozne ze se jedna o spatny soubor")
        msgbox.setIcon(QMessageBox.Warning)
        msgbox.setStandardButtons(QMessageBox.Ok)

        x = msgbox.exec_()

    def show_PopUp_RSA512(self):
        msgbox = QMessageBox()
        msgbox.setWindowTitle("Chybny zacatek souboru")
        msgbox.setText(
            "Soubor obsahujici podpis nazacina 'RSA_SHA256'. Je mozne ze se jedna o spatny soubor")
        msgbox.setIcon(QMessageBox.Warning)
        msgbox.setStandardButtons(QMessageBox.Ok)

    def show_PopUp_SouborNenalezen(self):
        msgbox = QMessageBox()
        msgbox.setWindowTitle("Soubor nebyl nalezen")
        msgbox.setText(
            "Nebyl nalazen soubor sign nebo textovy soubor")
        msgbox.setIcon(QMessageBox.Warning)
        msgbox.setStandardButtons(QMessageBox.Ok)

        x = msgbox.exec_()
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWin = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWin)
    MainWin.show()
    sys.exit(app.exec_())